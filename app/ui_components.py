# /workspaces/auto-report-generator/app/ui_components.py

import streamlit as st
import pandas as pd
import traceback
from typing import Dict, Optional, Any, Tuple

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø–æ–ª—ñ–≤
from app.config_fields import EXPECTED_APP_FIELDS, APP_INTERNAL_KEYS

# –°–ª–æ–≤–Ω–∏–∫–∏ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–≤ (—Ü–µ —ó—Ö–Ω—î –ø—Ä–∞–≤–∏–ª—å–Ω–µ –º—ñ—Å—Ü–µ)
LANGUAGES = {
    "uk": {
        "page_title": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ó–≤—ñ—Ç—ñ–≤",
        "app_title": "üìã –ê–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ó–≤—ñ—Ç—ñ–≤",
        "app_subtitle": "–ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ –∑–≤—ñ—Ç üßæ —ñ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –π–æ–≥–æ –Ω–∞ email üì©",
        "select_language": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        "select_data_source": "–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö:",
        "google_sheet_id_option": "Google Sheet ID",
        "csv_file_option": "CSV —Ñ–∞–π–ª",
        "enter_google_sheet_id": "–í–≤–µ–¥—ñ—Ç—å Google Sheet ID:",
        "upload_csv_file": "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª",
        "enter_client_email": "–í–≤–µ–¥—ñ—Ç—å email –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É:",
        "generate_button": "üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç",
        "mapping_header": "‚öôÔ∏è –ó—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ –≤–∞—à–æ–≥–æ CSV",
        "mapping_caption": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å, —è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ –∑ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º –ø–æ–ª—è–º.",
        "select_csv_column_for": "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–æ–≤–ø–µ—Ü—å CSV –¥–ª—è",
        "warning_enter_email": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å email.",
        "warning_enter_gsheet_id": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å Google Sheet ID.",
        "warning_upload_csv": "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª.",
        "warning_setup_mapping": "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ (—Ö–æ—á–∞ –± –æ–¥–Ω–µ –ø–æ–ª–µ).",
        "error_gcp_init": "–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—é—á—ñ–≤ Google Cloud. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.",
        "spinner_generating": "–ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å. ‚è≥",
        "success_report_sent": "‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞",
        "error_report_generation": "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É:",
        "error_csv_header_read": "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ CSV",
        "google_sheet_id_help": "ID Google –¢–∞–±–ª–∏—Ü—ñ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –≤ URL –ø—ñ—Å–ª—è '/d/' —Ç–∞ –ø–µ—Ä–µ–¥ '/edit'."
    },
    "en": {
        # ... —Ç—É—Ç –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ ...
        "page_title": "Report Generator",
        "app_title": "üìã Auto-Report Generator",
        "app_subtitle": "Generate a report üßæ and receive it via email üì©",
        "select_language": "Select language:",
        "select_data_source": "Select data source:",
        "google_sheet_id_option": "Google Sheet ID",
        "csv_file_option": "CSV File",
        "enter_google_sheet_id": "Enter Google Sheet ID:",
        "upload_csv_file": "Upload CSV file",
        "enter_client_email": "Enter email to send the report:",
        "generate_button": "üöÄ Generate and Send Report",
        "mapping_header": "‚öôÔ∏è Map Columns from Your CSV",
        "mapping_caption": "Please specify which columns from your file correspond to the required fields.",
        "select_csv_column_for": "Select CSV column for",
        "warning_enter_email": "Please enter an email.",
        "warning_enter_gsheet_id": "Please enter the Google Sheet ID.",
        "warning_upload_csv": "Please upload a CSV file.",
        "warning_setup_mapping": "Please set up column mapping (at least one field).",
        "error_gcp_init": "Error initializing Google Cloud keys. Check your settings.",
        "spinner_generating": "Generating report... This may take some time. ‚è≥",
        "success_report_sent": "‚úÖ Report successfully sent to",
        "error_report_generation": "‚ùå An error occurred while generating the report:",
        "error_csv_header_read": "Error reading CSV headers",
        "google_sheet_id_help": "Google Sheet ID can be found in the URL after '/d/' and before '/edit'."
    }
}

def get_texts(language_code: str = "uk") -> Dict[str, str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó –º–æ–≤–∏."""
    return LANGUAGES.get(language_code, LANGUAGES["uk"])

def language_selector() -> str:
    """–°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–∂–µ—Ç –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ–¥ –≤–∏–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏."""
    lang_options_display = {"–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "uk", "English": "en"}
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è selectbox
    # –¶–µ —Ä–æ–±–∏—Ç—å –∫–æ–¥ —Å—Ç—ñ–π–∫–∏–º, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ st.session_state —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
    current_lang_display = st.session_state.get('selected_language_display', "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
    try:
        current_index = list(lang_options_display.keys()).index(current_lang_display)
    except ValueError:
        current_index = 0 # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–∂–µ—Ç–∞ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π –º–æ–≤—ñ
    texts = get_texts(st.session_state.get('selected_language_code', 'uk'))

    selected_lang_display = st.sidebar.selectbox(
        label=texts["select_language"],
        options=list(lang_options_display.keys()),
        index=current_index,
        key="language_select_widget_main_v3" # –¶–µ–π –∫–ª—é—á —Ç–µ–ø–µ—Ä –±—É–¥–µ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º
    )

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —ñ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞—Ç–æ–∫, –¢–Ü–õ–¨–ö–ò –Ø–ö–©–û –º–æ–≤–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è
    if st.session_state.get('selected_language_display') != selected_lang_display:
        st.session_state.selected_language_display = selected_lang_display
        st.session_state.selected_language_code = lang_options_display[selected_lang_display]
        st.rerun()
        
    return lang_options_display.get(selected_lang_display, "uk")

def display_csv_column_mapping_ui(texts: Dict[str, str], csv_file_obj: Any) -> Optional[Dict[str, str]]:
    """–°—Ç–≤–æ—Ä—é—î UI –¥–ª—è –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ CSV —Ñ–∞–π–ª—É."""
    if csv_file_obj is None:
        return None

    try:
        csv_file_obj.seek(0)
        df_headers = pd.read_csv(csv_file_obj, nrows=0, encoding='utf-8').columns.tolist()
        csv_file_obj.seek(0)

        st.subheader(texts["mapping_header"])
        st.caption(texts["mapping_caption"])

        temp_mapping = {}
        cols = st.columns(2)
        for i, (internal_field, display_name_key) in enumerate(EXPECTED_APP_FIELDS.items()):
            with cols[i % 2]:
                display_name = texts.get(display_name_key, internal_field.replace("_", " ").title())
                
                # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä, —è–∫—â–æ –≤—ñ–Ω —î –≤ session_state
                prev_selection = st.session_state.user_column_mapping.get(internal_field, '')
                index = 0
                if prev_selection and prev_selection in df_headers:
                    index = df_headers.index(prev_selection) + 1 # +1 –±–æ options –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ ''

                selected_column = st.selectbox(
                    label=f"{texts['select_csv_column_for']} '{display_name}':",
                    options=[''] + df_headers,
                    index=index,
                    key=f"map_select_{internal_field}" # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–ª—è
                )
                if selected_column:
                    temp_mapping[internal_field] = selected_column
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ª–∏—à–µ —è–∫—â–æ —â–æ—Å—å –∑–º—ñ–Ω–∏–ª–æ—Å—è
        if temp_mapping != st.session_state.user_column_mapping:
            st.session_state.user_column_mapping = temp_mapping
            st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó –∑–º—ñ–Ω

        return st.session_state.user_column_mapping

    except Exception as e:
        st.error(f"{texts['error_csv_header_read']}: {e}")
        traceback.print_exc()
        return None

def build_main_input_section(texts: Dict[str, str]) -> Tuple[str, Optional[str], Optional[Any], Optional[str], Optional[Dict[str, str]]]:
    """–ë—É–¥—É—î –æ—Å–Ω–æ–≤–Ω—É —Å–µ–∫—Ü—ñ—é –≤–≤–æ–¥—É –¥–∞–Ω–∏—Ö —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –≤–≤–µ–¥–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è."""
    data_source = st.radio(
        label=texts["select_data_source"],
        options=[texts["google_sheet_id_option"], texts["csv_file_option"]],
        key="data_source_radio",
        horizontal=True
    )

    sheet_id_val, csv_file_obj_val, column_mapping_val = None, None, None

    if data_source == texts["google_sheet_id_option"]:
        sheet_id_val = st.text_input(
            label=texts["enter_google_sheet_id"],
            value=st.session_state.get('sheet_id_input', ''),
            placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥, 1abc2def3ghi_JKLMN...",
            help=texts["google_sheet_id_help"],
            key="sheet_id_input"
        ).strip()
    else: # CSV File
        csv_file_obj_val = st.file_uploader(
            label=texts["upload_csv_file"],
            type=["csv"],
            key=f"file_uploader_{st.session_state.csv_file_uploader_key}"
        )
        if csv_file_obj_val:
            column_mapping_val = display_csv_column_mapping_ui(texts, csv_file_obj_val)

    email_val = st.text_input(
        label=texts["enter_client_email"],
        value=st.session_state.get('email_input', ''),
        placeholder="example@email.com",
        key="email_input"
    ).strip()

    return data_source, sheet_id_val, csv_file_obj_val, email_val, column_mapping_val