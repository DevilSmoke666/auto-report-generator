# /workspaces/auto-report-generator/app/ui_components.py

import streamlit as st
import pandas as pd
from typing import Dict, Optional, Any, Tuple

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
from app.config import EXPECTED_APP_FIELDS
from app.internationalization import LANGUAGES # –í–∏–Ω–æ—Å–∏–º–æ —Ç–µ–∫—Å—Ç–∏ –≤ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª

def get_texts(language_code: str) -> Dict[str, str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó –º–æ–≤–∏."""
    return LANGUAGES.get(language_code, LANGUAGES["uk"])

def setup_page_config(texts: Dict[str, str]):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Streamlit."""
    st.set_page_config(
        page_title=texts.get("page_title", "Report Generator"),
        page_icon="üìã",
        layout="centered"
    )

def language_selector():
    """–°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–∂–µ—Ç –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ —ñ –æ–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω."""
    
    def _language_changed():
        # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ selectbox
        st.session_state.lang_code = st.session_state.lang_options[st.session_state.lang_widget]

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø—Ü—ñ—ó –≤ session_state, —â–æ–± –Ω–µ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ —ó—Ö —â–æ—Ä–∞–∑—É
    st.session_state.lang_options = {"–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "uk", "English": "en"}
    display_options = list(st.session_state.lang_options.keys())
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å, —â–æ–± –≤—ñ–¥–∂–µ—Ç –ø–æ–∫–∞–∑—É–≤–∞–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    current_lang_display = next((lang for lang, code in st.session_state.lang_options.items() if code == st.session_state.lang_code), "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
    current_index = display_options.index(current_lang_display)

    st.sidebar.selectbox(
        label="–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Select language:",
        options=display_options,
        index=current_index,
        key="lang_widget", # –ü—Ä–æ—Å—Ç–∏–π, —Å—Ç–∞—Ç–∏—á–Ω–∏–π –∫–ª—é—á
        on_change=_language_changed # –ö–æ–ª–±–µ–∫, —è–∫–∏–π –æ–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω
    )

def display_main_ui(texts: Dict[str, str]) -> Tuple:
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –æ—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –≤–≤–µ–¥–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥–∞–Ω—ñ."""
    st.title(texts.get("app_title"))
    st.markdown(texts.get("app_subtitle"))

    data_source = st.radio(
        label=texts.get("select_data_source"),
        options=[texts.get("google_sheet_id_option"), texts.get("csv_file_option")],
        horizontal=True,
        key="data_source"
    )

    sheet_id, csv_file, column_mapping = None, None, None

    if st.session_state.data_source == texts.get("google_sheet_id_option"):
        sheet_id = st.text_input(
            label=texts.get("enter_google_sheet_id"),
            placeholder="1abc2def3ghi_JKLMN...",
            help=texts.get("google_sheet_id_help")
        )
    else:
        csv_file = st.file_uploader(label=texts.get("upload_csv_file"), type=["csv"])
        if csv_file:
            column_mapping = _display_csv_mapping_ui(texts, csv_file)

    email = st.text_input(label=texts.get("enter_client_email"), placeholder="example@email.com")
    
    generate_button_pressed = st.button(texts.get("generate_button"), use_container_width=True)

    return generate_button_pressed, data_source, sheet_id, csv_file, email, column_mapping

def _display_csv_mapping_ui(texts: Dict[str, str], csv_file: Any) -> Dict[str, str]:
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è UI –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤."""
    mapping = {}
    try:
        csv_file.seek(0)
        df_headers = pd.read_csv(csv_file, nrows=0, encoding='utf-8').columns.tolist()
        csv_file.seek(0)

        with st.expander(texts.get("mapping_header"), expanded=True):
            st.caption(texts.get("mapping_caption"))
            cols = st.columns(2)
            for i, (internal_key, display_key) in enumerate(EXPECTED_APP_FIELDS.items()):
                with cols[i % 2]:
                    display_name = texts.get(display_key, internal_key)
                    selected_col = st.selectbox(
                        label=f"{texts.get('select_csv_column_for')} '{display_name}':",
                        options=[''] + df_headers,
                        key=f"map_{internal_key}"
                    )
                    if selected_col:
                        mapping[internal_key] = selected_col
    except Exception as e:
        st.error(f"{texts.get('error_csv_header_read')}: {e}")
        return {} # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫ —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        
    return mapping