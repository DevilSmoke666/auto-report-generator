# /workspaces/auto-report-generator/app/ui_components.py
import traceback
import streamlit as st
import pandas as pd # –î–ª—è —á–∏—Ç–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ CSV —É —Ñ—É–Ω–∫—Ü—ñ—ó –º–∞–ø—É–≤–∞–Ω–Ω—è
from typing import Dict, List, Optional, Any # –î–æ–¥–∞–Ω–æ Any

# –°–ª–æ–≤–Ω–∏–∫–∏ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–≤
# –í–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ —Ü–µ–π —Å–ª–æ–≤–Ω–∏–∫ –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∏ –∑ JSON/YAML —Ñ–∞–π–ª—ñ–≤
LANGUAGES = {
    "uk": {
        "page_title": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ó–≤—ñ—Ç—ñ–≤",
        "app_title": "üìã –ê–í–¢–û-–ì–ï–ù–ï–†–ê–¢–û–† –ó–í–Ü–¢–Ü–í",
        "app_subtitle": "–ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ –∑–≤—ñ—Ç üßæ —ñ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –π–æ–≥–æ –Ω–∞ email üì©",
        "select_language": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        "select_data_source": "–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö:",
        "google_sheet_id_option": "Google Sheet ID",
        "csv_file_option": "CSV —Ñ–∞–π–ª",
        "enter_google_sheet_id": "–í–≤–µ–¥—ñ—Ç—å Google Sheet ID:",
        "upload_csv_file": "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª",
        "enter_client_email": "–í–≤–µ–¥—ñ—Ç—å email –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É:",
        "generate_button": "üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç",
        "mapping_header": "‚öôÔ∏è –ó—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ –≤–∞—à–æ–≥–æ CSV —Ñ–∞–π–ª—É",
        "mapping_caption": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å, —è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ –∑ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º –ø–æ–ª—è–º. –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è –Ω–µ–º–∞—î, –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º.",
        "report_field_prefix": "–ü–æ–ª–µ –∑–≤—ñ—Ç—É",
        "select_csv_column_for": "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–æ–≤–ø–µ—Ü—å CSV –¥–ª—è",
        "warning_enter_email": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å email –∫–ª—ñ—î–Ω—Ç–∞.",
        "warning_enter_gsheet_id": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å Google Sheet ID.",
        "warning_upload_csv": "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª.",
        "warning_setup_mapping": "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è CSV —Ñ–∞–π–ª—É (—Ö–æ—á–∞ –± –æ–¥–Ω–µ –ø–æ–ª–µ).",
        "error_gcp_init": "–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—é—á—ñ–≤ Google Cloud. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Codespace.",
        "spinner_generating": "–ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å. ‚è≥",
        "success_report_sent": "‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞",
        "error_report_generation": "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É:",
        # –î–æ–¥–∞–π—Ç–µ —Å—é–¥–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è –Ω–∞–∑–≤ –ø–æ–ª—ñ–≤ –∑ EXPECTED_APP_FIELDS
        "client_name_label": "–Ü–º'—è/–ù–∞–∑–≤–∞ –ö–ª—ñ—î–Ω—Ç–∞",
        "task_label": "–ó–∞–≤–¥–∞–Ω–Ω—è/–ü–æ—Å–ª—É–≥–∞",
        "status_label": "–°—Ç–∞—Ç—É—Å",
        "date_label": "–î–∞—Ç–∞",
        "comments_label": "–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ",
        "amount_label": "–°—É–º–∞ (—è–∫—â–æ —î)"
    },
    "en": {
        "page_title": "Report Generator",
        "app_title": "üìã AUTO-REPORT-GENERATOR",
        "app_subtitle": "Generate a report üßæ and receive it via email üì©",
        "select_language": "Select language:",
        "select_data_source": "Select data source:",
        "google_sheet_id_option": "Google Sheet ID",
        "csv_file_option": "CSV File",
        "enter_google_sheet_id": "Enter Google Sheet ID:",
        "upload_csv_file": "Upload CSV file",
        "enter_client_email": "Enter client's email to send the report:",
        "generate_button": "üöÄ Generate and Send Report",
        "mapping_header": "‚öôÔ∏è Map Columns from Your CSV File",
        "mapping_caption": "Please specify which columns from your file correspond to the required report fields. If a corresponding column does not exist, leave the selection blank.",
        "report_field_prefix": "Report field",
        "select_csv_column_for": "Select CSV column for",
        "warning_enter_email": "Please enter the client's email.",
        "warning_enter_gsheet_id": "Please enter the Google Sheet ID.",
        "warning_upload_csv": "Please upload a CSV file.",
        "warning_setup_mapping": "Please set up column mapping for the CSV file (at least one field).",
        "error_gcp_init": "Error initializing Google Cloud keys. Check secret settings and reload Codespace.",
        "spinner_generating": "Generating report... This may take some time. ‚è≥",
        "success_report_sent": "‚úÖ Report successfully generated and sent to",
        "error_report_generation": "‚ùå An error occurred while generating or sending the report:",
        "client_name_label": "Client Name/Title",
        "task_label": "Task/Service",
        "status_label": "Status",
        "date_label": "Date",
        "comments_label": "Comments",
        "amount_label": "Amount (if any)"
    }
}

def get_texts(language_code: str = "uk") -> Dict[str, str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ —Ç–µ–∫—Å—Ç—ñ–≤ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏."""
    return LANGUAGES.get(language_code, LANGUAGES["uk"])

def language_selector() -> str:
    """–°—Ç–≤–æ—Ä—é—î —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–≤–∏ —É –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ–¥ –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏."""
    lang_options_display = {"–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "uk", "English": "en"}
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ st.session_state –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏
    if 'selected_language_display' not in st.session_state:
        st.session_state.selected_language_display = "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" # –ú–æ–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ç–µ–∫—Å—Ç–∏ –¥–ª—è –ø—ñ–¥–ø–∏—Å—É —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    # –¶–µ —Å—Ç–≤–æ—Ä–∏—Ç—å –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å, –∞–ª–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Å–∞–º —Å–µ–ª–µ–∫—Ç–æ—Ä
    # –ú–æ–∂–Ω–∞ –æ–±—ñ–π—Ç–∏, —è–∫—â–æ –ø—ñ–¥–ø–∏—Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –±—É–¥–µ –¥–≤–æ–º–æ–≤–Ω–∏–º –æ–¥—Ä–∞–∑—É
    temp_texts = get_texts(lang_options_display.get(st.session_state.selected_language_display, "uk"))

    selected_lang_display = st.sidebar.selectbox(
        temp_texts.get("select_language", "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Select language:"), 
        options=list(lang_options_display.keys()),
        key="language_select_widget" # –ö–ª—é—á –¥–ª—è –≤—ñ–¥–∂–µ—Ç–∞
    )
    st.session_state.selected_language_display = selected_lang_display # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
    return lang_options_display.get(selected_lang_display, "uk")

def display_csv_column_mapping_ui(texts: Dict[str, str], csv_file_obj: Any, expected_app_fields: Dict[str, str]) -> Optional[Dict[str, str]]:
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î UI –¥–ª—è –º–∞–ø—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ CSV —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞–ø—É–≤–∞–Ω–Ω—è."""
    if csv_file_obj is None:
        return None
    
    user_column_mapping = None
    try:
        df_headers = pd.read_csv(csv_file_obj, nrows=0, encoding='utf-8').columns.tolist()
        csv_file_obj.seek(0) 

        st.subheader(texts["mapping_header"])
        st.caption(texts["mapping_caption"])
        
        temp_mapping = {}
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ st.columns –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è
        num_fields = len(expected_app_fields)
        cols_per_row = 2 
        
        field_keys = list(expected_app_fields.keys())

        for i in range(0, num_fields, cols_per_row):
            cols = st.columns(cols_per_row)
            for j in range(cols_per_row):
                if i + j < num_fields:
                    with cols[j]:
                        internal_field = field_keys[i+j]
                        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω—É –Ω–∞–∑–≤—É –ø–æ–ª—è –∑ `texts` –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `display_name` –∑ `expected_app_fields`
                        display_name_for_field = texts.get(expected_app_fields[internal_field], expected_app_fields[internal_field])
                        
                        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        prev_selection = st.session_state.user_column_mapping.get(internal_field, '')
                        current_index = 0
                        if prev_selection and prev_selection in df_headers:
                            current_index = (df_headers.index(prev_selection) + 1)
                        
                        selected_column = st.selectbox(
                            f"{texts.get('select_csv_column_for', 'Select CSV column for')} '{display_name_for_field}':",
                            options=[''] + df_headers, 
                            index=current_index,
                            key=f"map_ui_{internal_field}_v4" # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–ª—é—á—ñ
                        )
                        if selected_column: 
                            temp_mapping[internal_field] = selected_column
        
        st.session_state.user_column_mapping = temp_mapping
        user_column_mapping = temp_mapping

    except Exception as e:
        st.error(f"{texts.get('error_csv_header_read', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ CSV')}: {e}")
        traceback.print_exc()
        return None # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        
    return user_column_mapping
