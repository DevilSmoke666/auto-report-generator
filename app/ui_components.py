import traceback
import streamlit as st
import pandas as pd
from typing import Dict, List, Optional, Any, Tuple
import time # –î–æ–¥–∞–Ω–æ –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –∑–∞—Ç—Ä–∏–º–∫–∏

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø–æ–ª—ñ–≤
from app.config_fields import EXPECTED_APP_FIELDS

# –°–ª–æ–≤–Ω–∏–∫–∏ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–≤
LANGUAGES = {
    "uk": {
        "page_title": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ó–≤—ñ—Ç—ñ–≤",
        "app_title": "üìã –ê–í–¢–û-–ì–ï–ù–ï–†–ê–¢–û–† –ó–í–Ü–¢–Ü–í",
        "app_subtitle": "–ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ –∑–≤—ñ—Ç üßæ —ñ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –π–æ–≥–æ –Ω–∞ email üì©",
        "select_language": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        "select_data_source": "–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö:",
        "google_sheet_id_option": "Google Sheet ID",
        "csv_file_option": "CSV —Ñ–∞–π–ª",
        "enter_google_sheet_id": "–í–≤–µ–¥—ñ—Ç—å Google Sheet ID:",
        "upload_csv_file": "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª",
        "enter_client_email": "–í–≤–µ–¥—ñ—Ç—å email –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É:",
        "generate_button": "üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç",
        "mapping_header": "‚öôÔ∏è –ó—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ –≤–∞—à–æ–≥–æ CSV —Ñ–∞–π–ª—É",
        "mapping_caption": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å, —è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ –∑ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º –ø–æ–ª—è–º. –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è –Ω–µ–º–∞—î, –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º.",
        "report_field_prefix": "–ü–æ–ª–µ –∑–≤—ñ—Ç—É",
        "select_csv_column_for": "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–æ–≤–ø–µ—Ü—å CSV –¥–ª—è",
        "warning_enter_email": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å email –∫–ª—ñ—î–Ω—Ç–∞.",
        "warning_enter_gsheet_id": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å Google Sheet ID.",
        "warning_upload_csv": "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª.",
        "warning_setup_mapping": "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è CSV —Ñ–∞–π–ª—É (—Ö–æ—á–∞ –± –æ–¥–Ω–µ –ø–æ–ª–µ).",
        "error_gcp_init": "–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—é—á—ñ–≤ Google Cloud. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Codespace.",
        "spinner_generating": "–ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å. ‚è≥",
        "success_report_sent": "‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞",
        "error_report_generation": "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É:",
        "error_csv_header_read": "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ CSV –∞–±–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –º–∞–ø—É–≤–∞–Ω–Ω—è",
        "client_name_label": "–Ü–º'—è/–ù–∞–∑–≤–∞ –ö–ª—ñ—î–Ω—Ç–∞",
        "task_label": "–ó–∞–≤–¥–∞–Ω–Ω—è/–ü–æ—Å–ª—É–≥–∞",
        "status_label": "–°—Ç–∞—Ç—É—Å",
        "date_label": "–î–∞—Ç–∞",
        "comments_label": "–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ",
        "amount_label": "–°—É–º–∞ (—è–∫—â–æ —î)",
        "google_sheet_id_help": "ID Google –¢–∞–±–ª–∏—Ü—ñ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –≤ URL –ø—ñ—Å–ª—è '/d/' —Ç–∞ –ø–µ—Ä–µ–¥ '/edit'."
    },
    "en": {
        "page_title": "Report Generator",
        "app_title": "üìã AUTO-REPORT-GENERATOR",
        "app_subtitle": "Generate a report üßæ and receive it via email üì©",
        "select_language": "Select language:",
        "select_data_source": "Select data source:",
        "google_sheet_id_option": "Google Sheet ID",
        "csv_file_option": "CSV File",
        "enter_google_sheet_id": "Enter Google Sheet ID:",
        "upload_csv_file": "Upload CSV file",
        "enter_client_email": "Enter client's email to send the report:",
        "generate_button": "üöÄ Generate and Send Report",
        "mapping_header": "‚öôÔ∏è Map Columns from Your CSV File",
        "mapping_caption": "Please specify which columns from your file correspond to the required report fields. If a corresponding column does not exist, leave the selection blank.",
        "report_field_prefix": "Report field",
        "select_csv_column_for": "Select CSV column for",
        "warning_enter_email": "Please enter the client's email.",
        "warning_enter_gsheet_id": "Please enter the Google Sheet ID.",
        "warning_upload_csv": "Please upload a CSV file.",
        "warning_setup_mapping": "Please set up column mapping for the CSV file (at least one field).",
        "error_gcp_init": "Error initializing Google Cloud keys. Check secret settings and reload Codespace.",
        "spinner_generating": "Generating report... This may take some time. ‚è≥",
        "success_report_sent": "‚úÖ Report successfully generated and sent to",
        "error_report_generation": "‚ùå An error occurred while generating or sending the report:",
        "error_csv_header_read": "Error reading CSV headers or displaying mapping",
        "client_name_label": "Client Name/Title",
        "task_label": "Task/Service",
        "status_label": "Status",
        "date_label": "Date",
        "comments_label": "Comments",
        "amount_label": "Amount (if any)",
        "google_sheet_id_help": "Google Sheet ID can be found in the URL after '/d/' and before '/edit'."
    }
}

def get_texts(language_code: str = "uk") -> Dict[str, str]:
    return LANGUAGES.get(language_code, LANGUAGES["uk"])

def language_selector() -> str:
    lang_options_display = {"–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "uk", "English": "en"}
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è session_state, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    if 'selected_language_display' not in st.session_state:
        st.session_state.selected_language_display = "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"

    selected_lang_display = st.sidebar.selectbox(
        st.session_state.get('current_texts', LANGUAGES['uk'])["select_language"], # –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —Ç–µ–∫—Å—Ç
        options=list(lang_options_display.keys()),
        index=list(lang_options_display.keys()).index(st.session_state.selected_language_display),
        key="language_select_widget_main_v3" # –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª—é—á
    )
    if st.session_state.selected_language_display != selected_lang_display:
        st.session_state.selected_language_display = selected_lang_display
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ç–µ–∫—Å—Ç–∏ –≤ session_state
        st.session_state.current_texts = LANGUAGES.get(lang_options_display[selected_lang_display], LANGUAGES["uk"])
        st.rerun()
    return lang_options_display.get(selected_lang_display, "uk")

def display_csv_column_mapping_ui(texts: Dict[str, str], csv_file_obj: Any) -> Optional[Dict[str, str]]:
    if csv_file_obj is None:
        return None
    user_column_mapping_result = None
    try:
        # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ –∫—É—Ä—Å–æ—Ä —Ñ–∞–π–ª—É –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        csv_file_obj.seek(0)
        df_headers = pd.read_csv(csv_file_obj, nrows=0, encoding='utf-8').columns.tolist()
        csv_file_obj.seek(0) # –ó–Ω–æ–≤—É –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ –∫—É—Ä—Å–æ—Ä –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –ø—ñ—Å–ª—è —á–∏—Ç–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤

        st.subheader(texts.get("mapping_header", "CSV Column Mapping"))
        st.caption(texts.get("mapping_caption", "Please map your CSV columns."))

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è user_column_mapping, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        if 'user_column_mapping' not in st.session_state:
            st.session_state.user_column_mapping = {}

        temp_mapping = {}
        cols = st.columns(2)
        col_idx = 0
        for internal_field, display_name_key_in_texts in EXPECTED_APP_FIELDS.items():
            with cols[col_idx % 2]:
                display_name_for_ui = texts.get(display_name_key_in_texts, internal_field.replace("_", " ").title())
                prev_selection = st.session_state.user_column_mapping.get(internal_field, '')
                current_index = 0
                if prev_selection and prev_selection in df_headers:
                    current_index = (df_headers.index(prev_selection) + 1) # +1 —á–µ—Ä–µ–∑ –ø—É—Å—Ç–∏–π –µ–ª–µ–º–µ–Ω—Ç –Ω–∞ –ø–æ—á–∞—Ç–∫—É options

                selected_column = st.selectbox(
                    f"{texts.get('select_csv_column_for', 'Select CSV column for')} '{display_name_for_ui}':",
                    options=[''] + df_headers, # –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
                    index=current_index,
                    key=f"map_ui_comp_{internal_field}_v7" # –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª—é—á
                )
                if selected_column:
                    temp_mapping[internal_field] = selected_column
            col_idx += 1
        st.session_state.user_column_mapping = temp_mapping
        user_column_mapping_result = temp_mapping
    except Exception as e:
        st.error(f"{texts.get('error_csv_header_read', 'Error reading CSV headers')}: {e}")
        traceback.print_exc()
        return None
    return user_column_mapping_result

def build_main_input_section(texts: Dict[str, str]) -> Tuple[str, Optional[str], Optional[Any], Optional[str], Optional[Dict[str,str]]]:
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è session_state –¥–ª—è —ñ–Ω–ø—É—Ç—ñ–≤
    if 'sheet_id_input' not in st.session_state:
        st.session_state.sheet_id_input = ""
    if 'email_input' not in st.session_state:
        st.session_state.email_input = ""
    if 'csv_file_uploader_key' not in st.session_state:
        st.session_state.csv_file_uploader_key = 0 # –î–æ–¥–∞—î–º–æ –∫–ª—é—á –¥–ª—è reset fule_uploader

    data_source = st.radio(
        texts.get("select_data_source", "Select data source:"),
        [texts.get("google_sheet_id_option","Google Sheet ID"), texts.get("csv_file_option","CSV File")],
        key="data_source_radio_ui_v3", # –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª—é—á
        horizontal=True
    )
    sheet_id_val = None
    csv_file_obj_val = None
    column_mapping_val = None

    if data_source == texts.get("google_sheet_id_option","Google Sheet ID"):
        st.session_state.sheet_id_input = st.text_input(
            texts.get("enter_google_sheet_id","Enter Google Sheet ID:"),
            value=st.session_state.sheet_id_input,
            placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥, 1abc2def3ghi_JKLMN...",
            help=texts.get("google_sheet_id_help", "ID Google Sheet can be found in the URL after '/d/' and before '/edit'."), # –î–æ–¥–∞–Ω–∞ –ø—ñ–¥–∫–∞–∑–∫–∞
            key="sheet_id_text_input_ui_v3" # –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª—é—á
        )
        sheet_id_val = st.session_state.sheet_id_input.strip()
        
        # –û—á–∏—â–µ–Ω–Ω—è –º–∞–ø—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É, —è–∫—â–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—è –Ω–∞ Google Sheet ID
        if 'user_column_mapping' in st.session_state and any(st.session_state.user_column_mapping.values()):
            st.session_state.user_column_mapping = {key: '' for key in EXPECTED_APP_FIELDS.keys()}
        if 'csv_file_obj' in st.session_state and st.session_state.csv_file_obj is not None:
            st.session_state.csv_file_obj = None # –û—á–∏—Å—Ç–∏—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª
            st.session_state.csv_file_uploader_key += 1 # –ó–º—ñ–Ω–∏—Ç–∏ –∫–ª—é—á –¥–ª—è reset file_uploader
            st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ file_uploader

    else: # CSV File
        csv_file_obj_val = st.file_uploader(
            texts.get("upload_csv_file", "Upload CSV file"),
            type=["csv"],
            key=f"file_uploader_ui_v3_{st.session_state.csv_file_uploader_key}" # –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª—é—á
        )
        st.session_state.csv_file_obj = csv_file_obj_val # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±'—î–∫—Ç —Ñ–∞–π–ª—É –≤ session_state
        st.session_state.sheet_id_input = "" # –û—á–∏—â—É—î–º–æ –ø–æ–ª–µ Google Sheet ID

        if csv_file_obj_val is not None:
            column_mapping_val = display_csv_column_mapping_ui(texts, csv_file_obj_val)
            if column_mapping_val is None:
                # –Ø–∫—â–æ –º–∞–ø—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, —Å–∫–∏–¥–∞—î–º–æ —Ñ–∞–π–ª
                csv_file_obj_val = None
                st.session_state.csv_file_obj = None
                st.session_state.csv_file_uploader_key += 1 # –ó–º—ñ–Ω—é—î–º–æ –∫–ª—é—á, —â–æ–± Streamlit —Å–∫–∏–Ω—É–≤ file_uploader
                st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω

    st.session_state.email_input = st.text_input(
        texts.get("enter_client_email", "Enter client's email:"),
        value=st.session_state.email_input,
        placeholder="example@email.com",
        key="email_text_input_ui_v3" # –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª—é—á
    )
    email_val = st.session_state.email_input.strip()

    return data_source, sheet_id_val, csv_file_obj_val, email_val, column_mapping_val

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Streamlit
st.set_page_config(
    page_title=LANGUAGES["uk"]["page_title"], # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –Ω–∞–∑–≤–∞, –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–∞
    page_icon="üìä",
    layout="centered",
    initial_sidebar_state="expanded"
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è current_texts —É session_state
if 'current_texts' not in st.session_state:
    st.session_state.current_texts = LANGUAGES["uk"]
if 'user_column_mapping' not in st.session_state:
    st.session_state.user_column_mapping = {}
if 'csv_file_obj' not in st.session_state:
    st.session_state.csv_file_obj = None


# –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É (–≤ —Å–∞–π–¥–±–∞—Ä—ñ)
# –¶–µ–π —Ä—è–¥–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤–∏–±—ñ—Ä –º–æ–≤–∏ —ñ –æ–Ω–æ–≤–ª—é—î st.session_state.current_texts
selected_lang_code = language_selector()
texts = st.session_state.current_texts # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ç–µ–∫—Å—Ç–∏

# –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.markdown(f"<h1 style='text-align: center; color: #2C3E50;'>{texts['app_title']}</h1>", unsafe_allow_html=True)
st.markdown(f"<p style='text-align: center; color: #7F8C8D; font-size: 1.1em;'>{texts['app_subtitle']}</p>", unsafe_allow_html=True)

# –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫
st.markdown("---")

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —Å—Ç–∞–Ω
status_message_placeholder = st.empty()


data_source, sheet_id_val, csv_file_obj_val, email_val, column_mapping_val = build_main_input_section(texts)

# –î–æ–¥–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ—é
st.markdown("<br>", unsafe_allow_html=True) # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø

if st.button(texts["generate_button"]):
    status_message_placeholder.empty() # –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    is_valid = True
    if data_source == texts.get("google_sheet_id_option"):
        if not sheet_id_val:
            status_message_placeholder.warning(texts.get("warning_enter_gsheet_id"))
            is_valid = False
    elif data_source == texts.get("csv_file_option"):
        if csv_file_obj_val is None:
            status_message_placeholder.warning(texts.get("warning_upload_csv"))
            is_valid = False
        elif not column_mapping_val or not any(column_mapping_val.values()):
            status_message_placeholder.warning(texts.get("warning_setup_mapping"))
            is_valid = False

    if not email_val:
        status_message_placeholder.warning(texts.get("warning_enter_email"))
        is_valid = False

    if is_valid:
        try:
            with status_message_placeholder.spinner(texts.get("spinner_generating")):
                # –¢—É—Ç –±—É–¥–µ –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—É
                # –ù–∞—Ä–∞–∑—ñ —Ü–µ —ñ–º—ñ—Ç–∞—Ü—ñ—è:
                time.sleep(3) # –Ü–º—ñ—Ç–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏

                status_message_placeholder.success(f"{texts.get('success_report_sent')} {email_val}!")
                st.balloons() # –í–µ—Å–µ–ª—ñ –∫—É–ª—å–∫–∏ –Ω–∞ —á–µ—Å—Ç—å —É—Å–ø—ñ—Ö—É
                
                # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —Ñ–æ—Ä–º–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)
                st.session_state.sheet_id_input = ""
                st.session_state.email_input = ""
                st.session_state.user_column_mapping = {key: '' for key in EXPECTED_APP_FIELDS.keys()}
                # –î–ª—è file_uploader –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ –∫–ª—é—á, —â–æ–± —Å–∫–∏–Ω—É—Ç–∏ –π–æ–≥–æ
                st.session_state.csv_file_uploader_key += 1
                st.session_state.csv_file_obj = None # –û—á–∏—â—É—î–º–æ –æ–±'—î–∫—Ç —Ñ–∞–π–ª—É
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞—Ç–æ–∫, —â–æ–± –æ—á–∏—Å—Ç–∏—Ç–∏ UI (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ - –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö)
                # st.rerun() 

        except Exception as e:
            status_message_placeholder.error(f"{texts.get('error_report_generation')}\n\n```\n{e}\n```")
            traceback.print_exc()
    else:
        # –Ø–∫—â–æ is_valid == False, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ –≤–∏—â–µ
        pass

st.markdown("<br><br><br>", unsafe_allow_html=True)
st.markdown(f"<p style='text-align: center; color: #adb5bd; font-size: 0.9em;'>¬© 2024 {texts['app_title'].replace('üìã ', '')}. All rights reserved.</p>", unsafe_allow_html=True)