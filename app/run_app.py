# /workspaces/auto-report-generator/app/run_app.py
import streamlit as st
from dotenv import load_dotenv
import os
import json
import traceback
import pandas as pd # –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ CSV

# --- –ü–û–ß–ê–¢–û–ö –ë–õ–û–ö–£ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á –°–ï–ö–†–ï–¢–Ü–í –¢–ê GCP ---
# –¶–µ–π –±–ª–æ–∫ –º–∞—î –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Å–∫—Ä–∏–ø—Ç–∞
if 'secrets_initialized' not in st.session_state:
    load_dotenv() 
    print("INFO: [run_app.py] Attempted to load .env file.")

    print("INFO: [run_app.py] Attempting to set up Google Cloud credentials...")
    gcp_creds_json_string = os.environ.get('GOOGLE_CREDENTIALS_JSON') 

    if gcp_creds_json_string:
        try:
            project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
            temp_dir = os.path.join(project_root, ".tmp") 
            
            if not os.path.exists(temp_dir):
                os.makedirs(temp_dir)
                print(f"INFO: [run_app.py] Created directory: {temp_dir}")
            
            temp_creds_file_path = os.path.join(temp_dir, "gcp_service_account_streamlit.json") # –£–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É

            with open(temp_creds_file_path, 'w') as temp_file:
                temp_file.write(gcp_creds_json_string)
            
            os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = temp_creds_file_path 
            print(f"SUCCESS: [run_app.py] GOOGLE_APPLICATION_CREDENTIALS set to: {temp_creds_file_path}")
            st.session_state.gcp_creds_initialized = True
        except Exception as e:
            print(f"ERROR: [run_app.py] Failed to set up GCP credentials from env var 'GOOGLE_CREDENTIALS_JSON': {e}")
            traceback.print_exc()
            st.session_state.gcp_creds_initialized = False
    else:
        print("WARNING: [run_app.py] GOOGLE_CREDENTIALS_JSON environment variable for Google Cloud not found.")
        st.session_state.gcp_creds_initialized = False

    if not os.environ.get('GEMINI_API_KEY'):
        print("WARNING: [run_app.py] GEMINI_API_KEY environment variable not found.")
    # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç—ñ–≤ —Ç—É—Ç, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    st.session_state.secrets_initialized = True # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–±—É–ª–∞—Å—è
# --- –ö–Ü–ù–ï–¶–¨ –ë–õ–û–ö–£ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á ---

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –ü–Ü–°–õ–Ø –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
from app.report_generator import generate_and_send_report

# –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–ª—è, —è–∫—ñ –æ—á—ñ–∫—É—î –≤–∞—à –∑–≤—ñ—Ç (–∫–ª—é—á—ñ) —Ç–∞ —ó—Ö –æ–ø–∏—Å –¥–ª—è UI
# –¶—ñ –∫–ª—é—á—ñ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ context_builder.py
EXPECTED_APP_FIELDS = {
    "client_name": "–Ü–º'—è/–ù–∞–∑–≤–∞ –ö–ª—ñ—î–Ω—Ç–∞",
    "task": "–ó–∞–≤–¥–∞–Ω–Ω—è/–ü–æ—Å–ª—É–≥–∞",
    "status": "–°—Ç–∞—Ç—É—Å",
    "date": "–î–∞—Ç–∞",
    "comments": "–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ",
    "amount": "–°—É–º–∞ (—è–∫—â–æ —î)" 
}

def main():
    st.set_page_config(page_title="AUTO-REPORT-GENERATOR", layout="wide", initial_sidebar_state="auto")
    st.title("üìã AUTO-REPORT-GENERATOR")
    st.markdown("–ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ –∑–≤—ñ—Ç üßæ —ñ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –π–æ–≥–æ –Ω–∞ email üì©")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Å—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É UI
    if 'sheet_id_input' not in st.session_state:
        st.session_state.sheet_id_input = ""
    if 'email_input' not in st.session_state:
        st.session_state.email_input = ""
    if 'csv_file_uploader_key' not in st.session_state: # –î–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É file_uploader
        st.session_state.csv_file_uploader_key = 0
    if 'user_column_mapping' not in st.session_state: # –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–∞–ø—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        st.session_state.user_column_mapping = {key: '' for key in EXPECTED_APP_FIELDS}


    data_source = st.radio(
        "–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö:", 
        ["Google Sheet ID", "CSV —Ñ–∞–π–ª"], 
        key="data_source_radio",
        horizontal=True
    )
    
    sheet_id_from_ui = None
    csv_file_object_from_ui = None
    # user_column_mapping –±—É–¥–µ –±—Ä–∞—Ç–∏—Å—è –∑ st.session_state.user_column_mapping

    if data_source == "Google Sheet ID":
        st.session_state.sheet_id_input = st.text_input(
            "–í–≤–µ–¥—ñ—Ç—å Google Sheet ID:", 
            value=st.session_state.sheet_id_input, 
            placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥, 1abc2def3ghi_JKLMN...",
            key="sheet_id_text_input_main_v2" # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á
        )
        sheet_id_from_ui = st.session_state.sheet_id_input.strip()
        # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–æ Google Sheet, –º–∞–ø—É–≤–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ (–ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥–æ–º–∞
        # –∞–±–æ gsheet.py –æ–±—Ä–æ–±–ª—è—î —Ü–µ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–∑–≤ —Å—Ç–æ–≤–ø—Ü—ñ–≤ –∑ env vars, —è–∫—â–æ –≤–æ–Ω–∏ —î)
        # st.session_state.user_column_mapping = {key: '' for key in EXPECTED_APP_FIELDS} # –°–∫–∏–¥–∞—î–º–æ –º–∞–ø—É–≤–∞–Ω–Ω—è
    
    else: # data_source == "CSV —Ñ–∞–π–ª"
        csv_file_object_from_ui = st.file_uploader(
            "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª", 
            type=["csv"], 
            key=f"file_uploader_{st.session_state.csv_file_uploader_key}" 
        )
        st.session_state.sheet_id_input = "" # –°–∫–∏–¥–∞—î–º–æ sheet_id

        if csv_file_object_from_ui is not None:
            try:
                # –í–∞–∂–ª–∏–≤–æ: st.file_uploader –ø–æ–≤–µ—Ä—Ç–∞—î BytesIO –∞–±–æ –ø–æ–¥—ñ–±–Ω–∏–π –æ–±'—î–∫—Ç.
                # Pandas –º–æ–∂–µ —á–∏—Ç–∞—Ç–∏ –π–æ–≥–æ –Ω–∞–ø—Ä—è–º—É.
                df_headers = pd.read_csv(csv_file_object_from_ui, nrows=0).columns.tolist()
                csv_file_object_from_ui.seek(0) # –î—É–∂–µ –≤–∞–∂–ª–∏–≤–æ "–ø–µ—Ä–µ–º–æ—Ç–∞—Ç–∏" —Ñ–∞–π–ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫!

                st.subheader("‚öôÔ∏è –ó—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ –≤–∞—à–æ–≥–æ CSV —Ñ–∞–π–ª—É")
                st.caption("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å, —è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ –∑ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º –ø–æ–ª—è–º –¥–ª—è –∑–≤—ñ—Ç—É. –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è –Ω–µ–º–∞—î, –∑–∞–ª–∏—à—Ç–µ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
                
                temp_mapping = {}
                cols = st.columns(2) # –î–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏–≥–ª—è–¥—É –º–∞–ø—É–≤–∞–Ω–Ω—è
                col_idx = 0
                for internal_field, display_name in EXPECTED_APP_FIELDS.items():
                    with cols[col_idx % 2]:
                        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        prev_selection = st.session_state.user_column_mapping.get(internal_field, '')
                        # –Ø–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–∏–±–æ—Ä—É –Ω–µ–º–∞—î –≤ –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö, —Å–∫–∏–¥–∞—î–º–æ –π–æ–≥–æ
                        current_index = 0
                        if prev_selection and prev_selection in df_headers:
                            current_index = (df_headers.index(prev_selection) + 1)
                        
                        selected_column = st.selectbox(
                            f"{display_name}:", # –ö–æ—Ä–æ—Ç—à–∏–π –ø—ñ–¥–ø–∏—Å
                            options=[''] + df_headers, # –ü–æ—Ä–æ–∂–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è "–Ω–µ –∑—ñ—Å—Ç–∞–≤–ª—è—Ç–∏"
                            index=current_index,
                            key=f"map_{internal_field}_v2" # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á
                        )
                        if selected_column: 
                            temp_mapping[internal_field] = selected_column
                    col_idx += 1
                
                st.session_state.user_column_mapping = temp_mapping

            except Exception as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ CSV –∞–±–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –º–∞–ø—É–≤–∞–Ω–Ω—è: {e}")
                traceback.print_exc()
                csv_file_object_from_ui = None # –°–∫–∏–¥–∞—î–º–æ —Ñ–∞–π–ª, —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞

    st.session_state.email_input = st.text_input(
        "–í–≤–µ–¥—ñ—Ç—å email –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É:", 
        value=st.session_state.email_input,
        placeholder="example@email.com",
        key="email_text_input_main_v2"
    )
    email_from_ui = st.session_state.email_input.strip()

    if st.button("üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç"):
        valid_input = True
        if not email_from_ui:
            st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å email –∫–ª—ñ—î–Ω—Ç–∞.")
            valid_input = False
        
        final_column_mapping_to_pass = None
        if data_source == "Google Sheet ID":
            if not sheet_id_from_ui:
                st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å Google Sheet ID.")
                valid_input = False
        elif data_source == "CSV —Ñ–∞–π–ª":
            if not csv_file_object_from_ui:
                st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª.")
                valid_input = False
            elif not any(st.session_state.user_column_mapping.values()): # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –ø–æ–ª–µ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–æ
                 st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è CSV —Ñ–∞–π–ª—É (—Ö–æ—á–∞ –± –æ–¥–Ω–µ –ø–æ–ª–µ).")
                 valid_input = False
            else:
                final_column_mapping_to_pass = st.session_state.user_column_mapping
        
        if valid_input:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó GCP credentials –ø–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º
            if not st.session_state.get('gcp_creds_initialized', False) and (data_source == "Google Sheet ID" or (data_source == "CSV —Ñ–∞–π–ª" and any("google" in str(v).lower() for v in EXPECTED_APP_FIELDS.values()))): # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —è–∫—â–æ GCP –ø–æ—Ç—Ä—ñ–±–µ–Ω
                st.error("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—é—á—ñ–≤ Google Cloud. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Codespace.")
                return

            with st.spinner("–ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å. ‚è≥"):
                try:
                    print(f"DEBUG: Calling generate_and_send_report with email='{email_from_ui}', sheet_id='{sheet_id_from_ui}', csv_file is {'provided' if csv_file_object_from_ui else 'not provided'}, mapping: {final_column_mapping_to_pass}")
                    
                    # –ü–µ—Ä–µ–¥–∞—î–º–æ –æ–±'—î–∫—Ç —Ñ–∞–π–ª—É, –∞ –Ω–µ –π–æ–≥–æ –≤–º—ñ—Å—Ç, —è–∫—â–æ —Ü–µ CSV
                    current_csv_file_to_pass = csv_file_object_from_ui
                    if current_csv_file_to_pass:
                        current_csv_file_to_pass.seek(0) # –ü–µ—Ä–µ–º–æ—Ç—É—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ—é

                    generate_and_send_report(
                        email=email_from_ui, 
                        sheet_id=sheet_id_from_ui, 
                        csv_file=current_csv_file_to_pass, 
                        column_mapping=final_column_mapping_to_pass 
                    )
                    st.success(f"‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ {email_from_ui}")
                    
                    # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                    st.session_state.sheet_id_input = ""
                    st.session_state.email_input = ""
                    st.session_state.csv_file_uploader_key += 1 
                    st.session_state.user_column_mapping = {key: '' for key in EXPECTED_APP_FIELDS} # –°–∫–∏–¥–∞—î–º–æ –º–∞–ø—É–≤–∞–Ω–Ω—è
                    
                    st.rerun()

                except Exception as e:
                    detailed_error_message = f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É:\n\n{e}\n\nTraceback:\n{traceback.format_exc()}"
                    st.error(detailed_error_message)
                    print(f"ERROR in generate_and_send_report call from Streamlit: {e}") 
                    # traceback.print_exc() –≤–∂–µ –±—É–¥–µ —É st.error

if __name__ == "__main__":
    main()
