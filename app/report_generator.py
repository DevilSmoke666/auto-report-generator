# /workspaces/auto-report-generator/app/report_generator.py
import os
from datetime import datetime
from dotenv import load_dotenv
from typing import Optional # –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Ç–∏–ø—ñ–∑–∞—Ü—ñ—ó csv_file

# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü—ñ —ñ–º–ø–æ—Ä—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —ñ –≤–µ–¥—É—Ç—å –¥–æ –≤–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from app.gsheet import get_sheet_data 
from app.pdf_generator import generate_pdf
from app.email_sender import send_email
from app.zipper import zip_reports
from app.context_builder import build_context

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env (–∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏)
load_dotenv()

# –û–Ω–æ–≤–ª–µ–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó: –¥–æ–¥–∞—î–º–æ sheet_id —Ç–∞ csv_file
def generate_and_send_report(email: Optional[str] = None, 
                             sheet_id: Optional[str] = None, 
                             csv_file: Optional = None) -> None: # csv_file –º–æ–∂–µ –±—É—Ç–∏ UploadedFile –∞–±–æ None
    """–ì–µ–Ω–µ—Ä—É—î PDF-–∑–≤—ñ—Ç–∏ –∑ Google Sheets –∞–±–æ CSV, –∞—Ä—Ö—ñ–≤—É—î —ó—Ö —ñ –Ω–∞–¥—Å–∏–ª–∞—î –Ω–∞ email"""

    print(f"INFO: [report_generator.py] Received request: email='{email}', sheet_id='{sheet_id}', csv_file provided: {csv_file is not None}")

    # üìÖ –û—Ç—Ä–∏–º—É—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É
    today = datetime.now().strftime("%Y-%m-%d")

    # üìÇ –§–æ—Ä–º—É—î–º–æ —à–ª—è—Ö–∏ –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —ñ —Ñ–∞–π–ª—ñ–≤
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ os.path.abspath –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ —à–ª—è—Ö—ñ–≤, –æ—Å–æ–±–ª–∏–≤–æ —è–∫—â–æ REPORTS_DIR –≤—ñ–¥–Ω–æ—Å–Ω–∏–π
    base_dir_from_env = os.getenv("REPORTS_DIR", "reports")
    # –Ø–∫—â–æ —à–ª—è—Ö –≤—ñ–¥–Ω–æ—Å–Ω–∏–π, —Ä–æ–±–∏–º–æ –π–æ–≥–æ –≤—ñ–¥–Ω–æ—Å–Ω–æ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ–µ–∫—Ç—É (–∞–±–æ –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–±–æ—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó)
    # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∑ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ–µ–∫—Ç—É, –∞–±–æ REPORTS_DIR - –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö
    base_dir = os.path.abspath(base_dir_from_env) 
    
    reports_dir = os.path.join(base_dir, today)
    # ZIP-–∞—Ä—Ö—ñ–≤ —Ç–∞–∫–æ–∂ –∫—Ä–∞—â–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ base_dir –∞–±–æ reports_dir
    zip_name_only = os.getenv("ZIP_NAME", f"all_reports_{today}.zip")
    zip_full_path = os.path.join(reports_dir, zip_name_only) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞—Ä—Ö—ñ–≤ —É –ø–∞–ø—Ü—ñ –∑ –∑–≤—ñ—Ç–∞–º–∏ –∑–∞ –¥–µ–Ω—å

    # üóÇ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    try:
        os.makedirs(reports_dir, exist_ok=True)
        print(f"INFO: [report_generator.py] Reports directory ensured: {reports_dir}")
    except Exception as e:
        print(f"ERROR: [report_generator.py] Could not create reports directory {reports_dir}: {e}")
        # –¢—É—Ç –º–æ–∂–Ω–∞ –∞–±–æ –ø—ñ–¥–Ω—è—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫, –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ Streamlit
        raise # –ü–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ, —â–æ–± Streamlit –º—ñ–≥ —ó—ó –ø–æ–∫–∞–∑–∞—Ç–∏

    # üîÑ –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ, –ø–µ—Ä–µ–¥–∞—é—á–∏ sheet_id –∞–±–æ csv_file
    data = None
    if sheet_id:
        print(f"INFO: [report_generator.py] Getting data using sheet_id: {sheet_id}")
        data = get_sheet_data(sheet_id=sheet_id)
    elif csv_file:
        print(f"INFO: [report_generator.py] Getting data using csv_file: {csv_file.name if hasattr(csv_file, 'name') else 'Uploaded CSV'}")
        data = get_sheet_data(csv_file=csv_file)
    else:
        print("ERROR: [report_generator.py] No data source (sheet_id or csv_file) provided to generate_and_send_report.")
        # –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Streamlit; —Ç—É—Ç –º–æ–∂–Ω–∞ –∫–∏–Ω—É—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫
        raise ValueError("–ù–µ –Ω–∞–¥–∞–Ω–æ –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö (ID —Ç–∞–±–ª–∏—Ü—ñ –∞–±–æ CSV-—Ñ–∞–π–ª).")

    if not data: # –Ø–∫—â–æ –¥–∞–Ω—ñ –ø–æ—Ä–æ–∂–Ω—ñ –∞–±–æ None
        print("ERROR: [report_generator.py] No data retrieved from the source.")
        raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –≤–∫–∞–∑–∞–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ –∞–±–æ –¥–∂–µ—Ä–µ–ª–æ –ø–æ—Ä–æ–∂–Ω—î.")

    pdf_paths = []
    print(f"INFO: [report_generator.py] Starting PDF generation for {len(data)} records.")
    for i, record in enumerate(data):
        try:
            context = build_context(record) # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ build_context –ø—Ä–∏–π–º–∞—î –æ–¥–∏–Ω –∑–∞–ø–∏—Å
            # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–æ, –æ–±—Ä–æ–±–ª—è—é—á–∏ –º–æ–∂–ª–∏–≤—ñ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏ –≤ context['client']
            client_name_sanitized = "".join(c if c.isalnum() or c in (' ', '_') else '_' for c in str(context.get('client', 'UnknownClient')))
            filename = os.path.join(reports_dir, f"report_{i+1}_{client_name_sanitized.replace(' ', '_')}.pdf")
            
            generate_pdf(context, filename) # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ generate_pdf –ø—Ä–∏–π–º–∞—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —ñ —à–ª—è—Ö
            print(f"  [‚úÖ] –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")
            pdf_paths.append(filename)
        except Exception as e:
            print(f"ERROR: [report_generator.py] Failed to generate PDF for record {i+1} ({record}): {e}")
            # –ú–æ–∂–ª–∏–≤–æ, –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–ª—è —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∞–±–æ –∑—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ st.warning() –∞–±–æ –∑—ñ–±—Ä–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏ —ñ –ø–æ–∫–∞–∑–∞—Ç–∏ –≤ –∫—ñ–Ω—Ü—ñ

    if not pdf_paths:
        print("ERROR: [report_generator.py] No PDF reports were generated.")
        raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ PDF-–∑–≤—ñ—Ç—É.")

    # üóú –ê—Ä—Ö—ñ–≤—É—î–º–æ –≤—Å—ñ –∑–≤—ñ—Ç–∏
    print(f"INFO: [report_generator.py] Zipping reports into: {zip_full_path}")
    zip_reports(pdf_paths, zip_full_path) # –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ –∞—Ä—Ö—ñ–≤—É

    # üìß –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞ –ø–æ—à—Ç—É
    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –ø–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ –∞—Ä—Ö—ñ–≤—É
    if email:
        print(f"INFO: [report_generator.py] Sending email with archive {zip_full_path} to {email}")
        send_email(file_path=zip_full_path, recipient=email) 
    else:
        # –ú–æ–∂–ª–∏–≤–æ, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –æ—Ç—Ä–∏–º—É–≤–∞—á –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ email –Ω–µ –≤–∫–∞–∑–∞–Ω–æ
        default_recipient = os.getenv("EMAIL_TO_DEFAULT") 
        if default_recipient:
            print(f"INFO: [report_generator.py] Sending email with archive {zip_full_path} to default recipient {default_recipient}")
            send_email(file_path=zip_full_path, recipient=default_recipient)
        else:
            print("WARNING: [report_generator.py] Email not provided and no default recipient set. Email not sent.")
    
    print("INFO: [report_generator.py] generate_and_send_report finished.")