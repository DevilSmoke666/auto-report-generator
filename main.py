# /workspaces/auto-report-generator/main.py
import os
import json 
from dotenv import load_dotenv
import traceback # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É –ø–æ–º–∏–ª–æ–∫
from datetime import datetime # –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —à–ª—è—Ö—ñ–≤ –∑ –¥–∞—Ç–æ—é

# --- –ü–û–ß–ê–¢–û–ö –ë–õ–û–ö–£ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á GOOGLE CLOUD CREDENTIALS ---
# –¶–µ–π –±–ª–æ–∫ –º–∞—î –±—É—Ç–∏ –ø—ñ—Å–ª—è import os, json, load_dotenv
# —ñ –ø–µ—Ä–µ–¥ —ñ–º–ø–æ—Ä—Ç–∞–º–∏ –≤–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å GCP/Gemini

load_dotenv() 
print(f"INFO: [{os.path.basename(__file__)}] Attempted to load .env file.")

print(f"INFO: [{os.path.basename(__file__)}] Attempting to set up Google Cloud credentials...")
gcp_creds_json_string = os.environ.get('GOOGLE_CREDENTIALS_JSON') 

if gcp_creds_json_string:
    try:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ–µ–∫—Ç—É (–æ—Å–∫—ñ–ª—å–∫–∏ main.py –≤ –∫–æ—Ä–µ–Ω—ñ, —Ü–µ –ø–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è)
        project_root = os.path.dirname(os.path.abspath(__file__)) if '__file__' in globals() else os.getcwd()
        temp_dir = os.path.join(project_root, ".tmp") 
        
        if not os.path.exists(temp_dir):
            os.makedirs(temp_dir)
            print(f"INFO: [{os.path.basename(__file__)}] Created directory: {temp_dir}")
        
        temp_creds_file_path = os.path.join(temp_dir, "gcp_service_account_main.json") # –£–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è

        with open(temp_creds_file_path, 'w') as temp_file:
            temp_file.write(gcp_creds_json_string)
        
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = temp_creds_file_path 
        print(f"SUCCESS: [{os.path.basename(__file__)}] GOOGLE_APPLICATION_CREDENTIALS set to: {temp_creds_file_path}")
    except Exception as e:
        print(f"ERROR: [{os.path.basename(__file__)}] Failed to set up GCP credentials from env var 'GOOGLE_CREDENTIALS_JSON': {e}")
        traceback.print_exc()
else:
    print(f"WARNING: [{os.path.basename(__file__)}] GOOGLE_CREDENTIALS_JSON environment variable for Google Cloud not found.")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—à–∏—Ö –≤–∞–∂–ª–∏–≤–∏—Ö —Å–µ–∫—Ä–µ—Ç—ñ–≤ (–ø—Ä–æ—Å—Ç–æ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è)
if not os.environ.get('GEMINI_API_KEY'):
    print(f"WARNING: [{os.path.basename(__file__)}] GEMINI_API_KEY environment variable not found.")
# --- –ö–Ü–ù–ï–¶–¨ –ë–õ–û–ö–£ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á GOOGLE CLOUD CREDENTIALS ---

# –Ü–º–ø–æ—Ä—Ç–∏ –≤–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤ –ø—Ä–æ–≥—Ä–∞–º–∏ –ü–Ü–°–õ–Ø –±–ª–æ–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
from app.gsheet import get_sheet_data
from app.pdf_generator import generate_pdf # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü–µ–π —Ñ–∞–π–ª/—Ñ—É–Ω–∫—Ü—ñ—è —ñ—Å–Ω—É—é—Ç—å
from app.email_sender import send_email
from app.zipper import zip_reports
from app.context_builder import build_context
# from app.report_generator import generate_and_send_report # –ú–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å

def run_main_processing():
    """–û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è main.py"""
    print("INFO: [main.py] Starting main report generation process...")
    
    try:
        # üìÖ –û—Ç—Ä–∏–º—É—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É
        today = datetime.now().strftime("%Y-%m-%d")

        # üìÇ –§–æ—Ä–º—É—î–º–æ —à–ª—è—Ö–∏ –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —ñ —Ñ–∞–π–ª—ñ–≤
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω—ñ —à–ª—è—Ö–∏ –∞–±–æ —à–ª—è—Ö–∏ –≤—ñ–¥–Ω–æ—Å–Ω–æ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ–µ–∫—Ç—É
        project_root = os.path.dirname(os.path.abspath(__file__)) if '__file__' in globals() else os.getcwd()
        base_dir_from_env = os.getenv("REPORTS_DIR", "reports")
        base_dir = os.path.join(project_root, base_dir_from_env)
        
        reports_dir_for_today = os.path.join(base_dir, today)
        zip_name_only = os.getenv("ZIP_NAME", f"all_reports_{today}.zip")
        zip_full_path = os.path.join(reports_dir_for_today, zip_name_only)

        os.makedirs(reports_dir_for_today, exist_ok=True)
        print(f"INFO: [main.py] Reports directory: {reports_dir_for_today}")
        print(f"INFO: [main.py] ZIP archive path: {zip_full_path}")

        # üîÑ –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ Google Sheet
        # –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ sheet_id. –ë–µ—Ä–µ–º–æ –π–æ–≥–æ –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.
        sheet_id_to_use = os.getenv("GOOGLE_SHEET_ID")
        if not sheet_id_to_use:
            print("ERROR: [main.py] GOOGLE_SHEET_ID environment variable not set. Cannot fetch sheet data.")
            return

        print(f"INFO: [main.py] Fetching data from Google Sheet ID: {sheet_id_to_use}")
        # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –¥–ª—è main.py –º–∞–ø—É–≤–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ, –∞–±–æ gsheet.py –æ–±—Ä–æ–±–ª—è—î —Ü–µ
        # –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–∑–≤ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ –∞–±–æ —ñ–Ω—à–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è –Ω–∞–∑–≤ —Å—Ç–æ–≤–ø—Ü—ñ–≤.
        data = get_sheet_data(sheet_id=sheet_id_to_use, csv_file=None, column_mapping=None) 

        if data is None: # get_sheet_data –ø–æ–≤–µ—Ä—Ç–∞—î None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
            print("ERROR: [main.py] Failed to retrieve data from Google Sheet. Aborting.")
            return
        if not data and isinstance(data, list): # –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫
            print("WARNING: [main.py] No data records found in the Google Sheet. Nothing to process.")
            return

        print(f"INFO: [main.py] Data received, {len(data)} records. Starting PDF generation...")
        pdf_paths = []
        for i, record in enumerate(data):
            record_identifier = str(record.get("client_name", record.get("id", f"record_{i+1}")))
            print(f"INFO: [main.py] Processing record {i+1}/{len(data)} for '{record_identifier}'...")
            try:
                context = build_context(record) # context_builder –º–∞—î –æ—á—ñ–∫—É–≤–∞—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω—ñ –∫–ª—é—á—ñ
                
                client_name_sanitized = "".join(c if c.isalnum() or c in (' ', '_') else '_' for c in str(context.get('client', f'UnknownClient_{i+1}')))
                filename = os.path.join(reports_dir_for_today, f"report_{i+1}_{client_name_sanitized.replace(' ', '_')}.pdf")
                
                generate_pdf(context, filename)
                print(f"  [‚úÖ] –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")
                pdf_paths.append(filename)
            except Exception as e_record:
                print(f"ERROR: [main.py] Error processing record {i+1} ('{record_identifier}'): {e_record}")
                traceback.print_exc()
                continue # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Å–æ–º

        if not pdf_paths:
            print("ERROR: [main.py] No PDF reports were generated. Aborting email send.")
            return

        print(f"INFO: [main.py] Zipping {len(pdf_paths)} PDF reports into: {zip_full_path}")
        zip_reports(pdf_paths, zip_full_path)
        # –õ–æ–≥ –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É –º–∞—î –±—É—Ç–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ zip_reports

        # üìß –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞ –ø–æ—à—Ç—É
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞)
        email_recipient = os.getenv("EMAIL_MAIN_PY_RECIPIENT", os.getenv("EMAIL_TO_DEFAULT"))
        if not email_recipient:
            print("WARNING: [main.py] No recipient email configured (EMAIL_MAIN_PY_RECIPIENT or EMAIL_TO_DEFAULT). Email not sent.")
        else:
            print(f"INFO: [main.py] Attempting to send email with archive {zip_full_path} to {email_recipient}")
            email_sent = send_email(file_path=zip_full_path, recipient=email_recipient)
            if email_sent:
                print(f"SUCCESS: [main.py] Email process reported as successful for {email_recipient}.")
            else:
                print(f"ERROR: [main.py] Email sending process reported as failed for {email_recipient}.")
        
        print("INFO: [main.py] Main processing finished.")

    except Exception as e:
        print(f"CRITICAL ERROR in main.py run_main_processing: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    run_main_processing()
